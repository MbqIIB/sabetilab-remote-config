- hosts: nodes

  environment:
    PLACEHOLDER_VAR: "foobar"

  vars_files:
    - "../settings_field_node.yml"

  vars:
    security_ssh_port: "{{ ssh_port }}"
    autossh_tunnel_client_identity: autossh_id_rsa
    autossh_tunnel_client_key_map:
      - src: "../keys/{{autossh_tunnel_client_identity}}"
    autossh_tunnel_client_host: "{{ manager_domain_name }}"
    autossh_tunnel_client_forward: '{{ ssh_tunnel_port | default(0) }}:127.0.0.1:{{ ssh_port }}'
    autossh_remote_port_stdin_receiver: "/opt/field-node/update_route53.py"
    skip_autossh_restart_handler: true

  roles:
    - geerlingguy.security
    - tersmitten.autossh-tunnel-client

  tasks:
    - name: Install htop
      apt: pkg=htop state=installed

    - name: Install openssh-server
      apt: pkg=openssh-server state=installed

    - name: Install git
      apt: pkg=git state=installed

    - name: Install ansible
      apt: pkg=ansible state=installed

    - name: Install tmux
      apt: pkg=tmux state=installed

    - name: Install python-dev
      apt: pkg=python-dev state=installed

    - name: download pip installer script
      get_url: 
        url: https://bootstrap.pypa.io/get-pip.py
        dest: "/opt/get-pip.py"
        mode: "0755"
      register: pip_script_downloaded
    - name: install pip
      command: "python /opt/get-pip.py"
      when: pip_script_downloaded|success

    - name: Create file copy destination on remote
      file: path=/opt/field-node state=directory mode=0755

    - name: Copy python dependency file 
      copy: 
        src: "./files/requirements.txt"
        dest: "/opt/field-node/python-requirements.txt"
        mode: "0744"

    - name: Install python dependencies
      pip: 
        requirements: "/opt/field-node/python-requirements.txt"

    - name: Copy in Route53 update script (as template)
      template: 
        src: "./files/update_route53.py.j2"
        dest: "/opt/field-node/update_route53.py"
        mode: "0744"

    - name: setup cron job to update Route53 on reboot
      cron: 
        name: "update route53 (on reboot)"
        special_time: reboot
        job: "/opt/field-node/update_route53.py"
        state: absent

    - name: setup cron job to update Route53 every half-hour
      cron: 
        name: update route53
        minute: "5,35"
        job: "/opt/field-node/update_route53.py"

    - name: Update Route53 zone record for this node
      command: "/opt/field-node/update_route53.py"

    - name: add users 
      user: "name={{item|quote}} shell=/bin/bash"
      with_items: "{{github_usernames_with_access}}"

    - name: add users with sudo access
      user: "name={{item|quote}} group=sudo shell=/bin/bash" # use "admin" for Ubuntu <11.10, and "sudo" for later
      with_items: "{{github_usernames_with_sudo_access}}"

    - name: add ssh keys for users from GitHub
      authorized_key: "user={{item|quote}} key=https://github.com/{{item}}.keys"
      with_items: "{{github_usernames_with_access}}"

    - name: add ssh keys for sudo users from GitHub
      authorized_key: "user={{item|quote}} key=https://github.com/{{item}}.keys"
      with_items: "{{github_usernames_with_sudo_access}}"

    - name: Copy in password clearing script
      template: 
        src: "../files/clear_and_expire_password.sh" 
        dest: "/opt/field-node/clear_and_expire_password.sh"
        mode: "0744"

    - name: Clear and expire passwords so sudoers are promped at first (key-based) login
      command: "/opt/field-node/clear_and_expire_password.sh {{item}}"
      with_items: "{{github_usernames_with_sudo_access}}"

    - name: restart autossh-tunnel-client
      command: service autossh-tunnel-client restart
      async: 1
      poll: 0
      ignore_errors: true

    # - name: restart machine
    #   shell: sleep 2 && reboot
    #   async: 1
    #   poll: 0
    #   become: yes
    #   ignore_errors: true

    - name: wait for DNS change bearing new port to propagate
      local_action: wait_for timeout=50

    - name: get new port from DNS
      local_action: shell dig TXT +short {{ inventory_hostname }}.{{ domain_name }} @ns-491.awsdns-61.com | perl -lape 's/^"P(?<port_num>[0-9]+)\\.*"/$+{port_num}/g'
      register: tunnel_port

    - debug: msg="Observed change in tunnel port for {{ inventory_hostname }} {{ ansible_port }} -> {{ tunnel_port.stdout }}"

    - name: waiting for server to come back
      delegate_to: "{{ manager_domain_name }}"
      wait_for: host=localhost port={{ tunnel_port.stdout }} state=started delay=3 timeout=10
      become: false

    - name: set new port for remainder of ansible playbook
      set_fact: ansible_port={{ tunnel_port.stdout }}
      when: ansible_port != tunnel_port.stdout

    # - name: Ensure .ssh directory exists.
    #   file: 
    #     dest: "/home/ubuntu/.ssh"
    #     mode: 0700 
    #     owner: ubuntu
    #     state: directory

    # - name: Install deployment ssh key
    #   copy: 
    #     content: "{{ deploy_ssh_private_key }}" 
    #     dest: "/home/ubuntu/.ssh/id_rsa"
    #     mode: 0600
    #     owner: ubuntu

    #- name: setup cron job to call ansible-pull every hour
    #  cron: 
    #    name: "update route53"
    #    minute: "5"
    #    user: ubuntu
    #    job: "ansible-pull -U {{deploy_repo_url}} -i ./production ./field-node/base_playbook.yml"
